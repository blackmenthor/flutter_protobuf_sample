// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct AlbumA {
  var id: String? = nil
  var title: String? = nil
  var artist: String? = nil
  var price: Double? = nil

  static func fromList(_ list: [Any?]) -> AlbumA? {
    let id: String? = nilOrValue(list[0])
    let title: String? = nilOrValue(list[1])
    let artist: String? = nilOrValue(list[2])
    let price: Double? = nilOrValue(list[3])

    return AlbumA(
      id: id,
      title: title,
      artist: artist,
      price: price
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      title,
      artist,
      price,
    ]
  }
}
private class AlbumApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AlbumA.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class AlbumApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AlbumA {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class AlbumApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AlbumApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AlbumApiCodecWriter(data: data)
  }
}

class AlbumApiCodec: FlutterStandardMessageCodec {
  static let shared = AlbumApiCodec(readerWriter: AlbumApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AlbumApi {
  func getAlbum() throws -> [AlbumA?]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AlbumApiSetup {
  /// The codec used by AlbumApi.
  static var codec: FlutterStandardMessageCodec { AlbumApiCodec.shared }
  /// Sets up an instance of `AlbumApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AlbumApi?) {
    let getAlbumChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.AlbumApi.getAlbum", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAlbumChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAlbum()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAlbumChannel.setMessageHandler(nil)
    }
  }
}
